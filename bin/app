#!/usr/bin/env ruby

require "sinatra/base"
require "sinatra/assetpack"
require "haml"
require "json"
require "time"
require File.join(File.expand_path("..", File.dirname(__FILE__)),"lib","nailed")
require  File.join(File.expand_path("..", File.dirname(__FILE__)),"db","database")

class App < Sinatra::Base
  ROOT_PATH = File.join(File.expand_path("..", File.dirname(__FILE__)))
  self.set :root, File.join(ROOT_PATH, "lib")
  set :public_folder, File.join(ROOT_PATH, "public")
  set :views, File.join(ROOT_PATH, "views")
  set :bind, "0.0.0.0"
  set :port, Nailed.get_config["port"] || 4567
  theme = Nailed.get_config["theme"] || "default"

  register Sinatra::AssetPack

  assets {
    serve "/js",        from: "../public/vendor/js"
    serve "/css",       from: "../public/vendor/css"
    serve "/customcss", from: "../public/css"
    serve "/images",    from: "../public/images"

    js :jquery, "/js/external/jquery-1.11.2.min.js", [
      "/js/external/jquery-1.11.2.js"
    ]
    js :jqueryplugin, [
      "/js/external/jquery.quickfilter.js"
    ]
    js :bootstrap, "/js/bootstrap/bootstrap.min.js", [
      "/js/bootstrap/bootstrap.js"
    ]
    js :morris, "/js/morris/morris.min.js", [
      "/js/morris/morris.js",
      "/js/morris/raphael.js"
    ]

    css :bootstrap, "/css/bootstrap/#{theme}/bootstrap.min.css", [
      "/css/bootstrap/#{theme}/bootstrap.css"
    ]
    css :morris, "/css/morris/morris.min.js", [
      "/css/morris/morris.css"
    ]
    css :customcss, [
      "/customcss/navbar.css"
    ]

    js_compression  :jsmin
    css_compression :simple
  }

  before do
    @title = Nailed.get_config["title"] || "Dashboard"
    @products = Nailed.get_config["products"].map{|p,v| v["versions"]}.flatten.compact
    @product_query = @products.join("&product=")
  end

  helpers do
    def get_github_repos
      Pullrequest.all(:order => [:created_at.desc]).map(&:repository_rname).uniq
    end

    def get_trends(action, item)
      case action
      when :bug
        trend = Bugtrend.all(:product_name => item)
      when :pull
        trend = Pulltrend.all(:repository_rname => item)
      when :l3
        trend = L3Trend.all
      end
      trend_clone = trend.clone
      begin
        interval = (trend.length/20.0).round
        trend.each do |bt|
          if trend.index(bt) % interval != 0
            if bt != trend.last
              trend_clone.delete(bt)
            end
          end
        end
      rescue ZeroDivisionError
      end
      trend_clone.to_json
    end
  end

  # define sinatra routes
  get "/" do
    @github_repos = get_github_repos
    @l3trend = get_trends(:l3, nil)
    @allpulls = repository(:default).adapter.select("SELECT COUNT(repository_rname) AS open, repository_rname AS label FROM pullrequests GROUP BY repository_rname")
    @allopenl3bugs = (Bugreport.all(:is_open => true, :whiteboard.like => "%openL3%")).sort! {|a,b| Time.parse(b.last_change_time.to_s).to_i <=> Time.parse(a.last_change_time.to_s).to_i}
    @allopenbugs = (Bugreport.all(:is_open => true) -
                    Bugreport.all(:whiteboard.like => "%openL3%", :is_open => true)).sort! {|a,b| Time.parse(b.last_change_time.to_s).to_i <=> Time.parse(a.last_change_time.to_s).to_i}

    @bugtop = []
    Nailed.get_config["products"].each do |product,values|
      values["versions"].each do |version|
        p = Product.get(version)
        open = Bugreport.count(:product_name => p.name, :is_open => true)
        @bugtop << {label: p.name, value: open} unless open == 0
      end unless values["versions"].nil?
    end
    @bugtop = @bugtop.to_json

    @pulltop = []
    @allpulls.each do |donut_bite|
      @pulltop << {label: donut_bite.label, value: donut_bite.open}
    end
    @pulltop = @pulltop.to_json

    haml :index
  end

  Nailed.get_config["products"].each do |product,values|
    values["versions"].each do |version|
      get "/#{version.gsub(/ /,'_')}/bugzilla" do
        @github_repos = get_github_repos
        @product = version

        @bugtrend = get_trends(:bug, version)
        @allopenbugs = (Bugreport.all(:product_name => version, :is_open => true) -
                        Bugreport.all(:product_name => version, :whiteboard.like => "%openL3%", :is_open => true)).sort! {|a,b| Time.parse(b.last_change_time.to_s).to_i <=> Time.parse(a.last_change_time.to_s).to_i}
        @allopenl3bugs = (Bugreport.all(:product_name => version, :is_open => true, :whiteboard.like => "%openL3%")).sort! {|a,b| Time.parse(b.last_change_time.to_s).to_i <=> Time.parse(a.last_change_time.to_s).to_i}

        @bugprio = []
        {"P1 - Urgent" => "p1",
         "P2 - High" => "p2",
         "P3 - Medium" => "p3",
         "P4 - Low" => "p4",
         "P5 - None" => "p5"}.each_pair do |key,val|
           @bugprio << {"bugprio" => key, val => Bugreport.count(:product_name => version, :priority => key, :is_open => true)}
        end
        @bugprio = @bugprio.to_json

        @top5_components = []
        components = repository(:default).adapter.select("SELECT component AS label, COUNT(component) AS value FROM bugreports WHERE product_name = '#{version}' AND is_open = 't' GROUP BY component ORDER BY COUNT(component) DESC LIMIT 5")
        components.each do |bar|
          @top5_components << {label: bar.label, value: bar.value}
        end
        @component_labels = @top5_components.map{|a| a.values[0]}
        @component_values = @top5_components.map{|a| a.values[1]}
        @top5_components = @top5_components.to_json

        haml :bugzilla
      end
    end unless values["versions"].nil?
  end

  github_repos = Pullrequest.all(:order => [:created_at.desc]).map(&:repository_rname).uniq
  github_repos.each do |repo|
    get "/github/#{repo}" do
      @github_repos = get_github_repos
      @repo = repo
      org = Repository.get(repo).organization_oname
      @github_url_all_pulls = "https://github.com/#{org}/#{repo}/pulls"

      @allpulls = Pullrequest.all(:repository_rname => repo).sort! {|a,b| b.pr_number <=> a.pr_number}
      @pulltrend = get_trends(:pull, repo)

      haml :github
    end
  end

  get "/jenkins" do
    # TODO
  end

  run! if app_file == $0
end
